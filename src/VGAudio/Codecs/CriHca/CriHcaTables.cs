using System;
using VGAudio.Utilities;

namespace VGAudio.Codecs.CriHca
{
    internal static class CriHcaTables
    {
        static CriHcaTables()
        {
            Array[] arrays = ArrayUnpacker.UnpackArrays(PackedTables);
            QuantizeSpectrumBits = (byte[][])arrays[0];
            QuantizeSpectrumValue = (byte[][])arrays[1];
            QuantizedSpectrumBits = (byte[][])arrays[2];
            QuantizedSpectrumMaxBits = (byte[])arrays[3];
            QuantizedSpectrumValue = (sbyte[][])arrays[4];
            ScaleToResolutionCurve = (byte[])arrays[5];
            AthCurve = (byte[])arrays[6];
            MdctWindow = (double[])arrays[7];
        }

        public static float[] DequantizerScalingTable { get; } = Arrays.Generate(64, DequantizerScalingFunction);
        public static float[] DequantizerRangeTable { get; } = Arrays.Generate(16, DequantizerRangeFunction);
        public static float[] QuantizerScalingTable { get; } = Arrays.Generate(64, i => 1 / DequantizerScalingFunction(i));
        public static float[] QuantizerRangeTable { get; } = Arrays.Generate(16, QuantizerRangeFunction);
        public static int[] ResolutionMaxValues { get; } = Arrays.Generate(16, ResolutionMaxValueFunction);
        public static float[] IntensityRatioTable { get; } = Arrays.Generate(15, IntensityRatioFunction);
        public static float[] IntensityRatioBoundsTable { get; } = Arrays.Generate(14, IntensityRatioBoundsFunction);
        public static float[] ScaleConversionTable { get; } = Arrays.Generate(128, ScaleConversionTableFunction);

        public static byte[] ScaleToResolutionCurve { get; }
        public static byte[] QuantizedSpectrumMaxBits { get; }
        public static byte[][] QuantizedSpectrumBits { get; }
        public static sbyte[][] QuantizedSpectrumValue { get; }
        public static byte[][] QuantizeSpectrumBits { get; }
        public static byte[][] QuantizeSpectrumValue { get; }

        // Don't know what the window function is.
        // It's close to a KBD window with an alpha of around 3.82.
        // AAC and Vorbis windows are similar to it.
        public static double[] MdctWindow { get; }

        /// <summary>
        /// Represents an Absolute Threshold of Hearing (ATH) curve. 
        /// This curve is used when deriving resolutions from scale factors in very old HCA versions.
        /// </summary>
        /// <seealso cref="CriHcaFrame.ScaleAthCurve"/>
        /// <remarks>This curve seems to be a slight modification of the standard Painter & Spanias ATH curve formula</remarks>
        public static byte[] AthCurve { get; }

        public static byte[] DefaultChannelMapping { get; } = { 0, 1, 0, 4, 0, 1, 3, 7, 3 };

        public static byte[][] ValidChannelMappings { get; } =
        {
            new byte[] {0, 1, 0, 0, 0, 0, 0, 0},
            new byte[] {1, 0, 0, 0, 0, 0, 0, 0},
            new byte[] {0, 1, 1, 0, 1, 0, 0, 0},
            new byte[] {1, 0, 0, 1, 0, 1, 0, 0},
            new byte[] {0, 1, 1, 0, 0, 0, 0, 1},
            new byte[] {0, 0, 0, 1, 0, 0, 0, 0},
            new byte[] {0, 0, 0, 0, 0, 0, 0, 1},
            new byte[] {0, 0, 0, 1, 0, 0, 0, 0}
        };

        private static float DequantizerScalingFunction(int x) => (float)(Math.Sqrt(128) * Math.Pow(Math.Pow(2, 53f / 128), x - 63));
        private static float DequantizerRangeFunction(int x) => x == 0 ? 0 : 1 / QuantizerRangeFunction(x);
        private static float QuantizerRangeFunction(int x) => ResolutionMaxValueFunction(x) + 0.5f;
        private static float ScaleConversionTableFunction(int x) => x > 1 && x < 127 ? (float)Math.Pow(Math.Pow(2, 53f / 128), x - 64) : 0;
        private static float IntensityRatioFunction(int x) => (28 - x * 2) / 14f;
        private static float IntensityRatioBoundsFunction(int x) => (27 - x * 2) / 14f;

        private static int ResolutionMaxValueFunction(int x)
        {
            if (x < 8) return x;
            return (1 << (x - 4)) - 1;
        }

        private static readonly byte[] PackedTables =
        {
            0x01, 0x0D, 0x07, 0x00, 0x00, 0x7C, 0x90, 0x85, 0x61, 0xC4, 0x40, 0x0C, 0x04, 0xC5, 0x66, 0x6C,
            0x27, 0x3D, 0xA6, 0xDE, 0x67, 0xDA, 0x37, 0x28, 0x38, 0xC6, 0xD9, 0x63, 0x11, 0x95, 0xC4, 0x32,
            0x96, 0x34, 0xD2, 0x1F, 0x28, 0x49, 0xD6, 0x42, 0x88, 0x23, 0xA9, 0x2B, 0x89, 0x6D, 0xC1, 0x10,
            0x26, 0xC4, 0xEA, 0xFD, 0xA2, 0x5D, 0x03, 0xAF, 0xDB, 0x7E, 0xD1, 0x0A, 0xE3, 0x4B, 0x04, 0x50,
            0x8C, 0x47, 0x20, 0xBF, 0x6F, 0x83, 0x59, 0x24, 0xBB, 0x00, 0xD5, 0xDD, 0x15, 0xAC, 0xAE, 0x9A,
            0x31, 0x4B, 0xFF, 0x20, 0xFD, 0x83, 0xFC, 0x0F, 0xE7, 0xD7, 0x26, 0x44, 0x11, 0x7B, 0x14, 0x65,
            0x55, 0x37, 0xAD, 0x33, 0x7D, 0xD0, 0xD0, 0x83, 0x0E, 0xB4, 0xA0, 0x01, 0xF5, 0x9B, 0x0A, 0x94,
            0xA0, 0x88, 0xF0, 0xF7, 0x62, 0xF2, 0x84, 0xE9, 0xDF, 0x12, 0x0B, 0x4B, 0xD6, 0xD7, 0x10, 0x4D,
            0xAA, 0x2A, 0xE9, 0x7C, 0xEB, 0x81, 0x6C, 0x51, 0x2C, 0x82, 0xDD, 0x2E, 0x8A, 0x00, 0x5F, 0x28,
            0x02, 0x5B, 0x98, 0xA7, 0xDF, 0xB7, 0xC1, 0xF7, 0x6F, 0xCE, 0xF7, 0xBB, 0xDC, 0x92, 0x3F, 0x4D,
            0xAF, 0xDF, 0xDA, 0xE5, 0x76, 0x53, 0xBD, 0x5E, 0xED, 0x92, 0xFC, 0x69, 0x7E, 0x5E, 0x7C, 0xB1,
            0x38, 0x3D, 0x3D, 0x59, 0x71, 0x0C, 0xA6, 0x4F, 0x79, 0x10, 0x06, 0x0F, 0x86, 0x15, 0x03, 0x50,
            0x00, 0x00, 0x07, 0x6B, 0x6C, 0xDB, 0xCE, 0x16, 0x1D, 0xBF, 0x4F, 0xFD, 0xC6, 0xDD, 0xEF, 0xDE,
            0x95, 0x59, 0x12, 0x87, 0x41, 0xE0, 0x7B, 0x9E, 0xEB, 0xBA, 0x0E, 0xB0, 0x89, 0x25, 0xCC, 0x0B,
            0xE3, 0x9F, 0x7E, 0x47, 0x23, 0x2A, 0x53, 0xC4, 0xCF, 0x17, 0x8A, 0x50, 0x85, 0xC6, 0xF4, 0x57,
            0x8C, 0x57, 0xCC, 0x8F, 0xAC, 0x97, 0xEC, 0x47, 0xCE, 0x1D, 0xF7, 0x86, 0x77, 0xE1, 0x5F, 0x04,
            0x22, 0x14, 0x91, 0x88, 0x59, 0x42, 0x52, 0x92, 0x91, 0x9C, 0x14, 0xA8, 0x44, 0x15, 0xAA, 0x41,
            0x83, 0x5A, 0xD0, 0x81, 0x1E, 0x0D, 0xC3, 0x30, 0x82, 0x09, 0xCC, 0x60, 0x59, 0x96, 0x15, 0x6C,
            0xDB, 0xB6, 0xEF, 0xFB, 0x71, 0x1C, 0x27, 0xF8, 0x23, 0x08, 0x1E, 0x0C, 0x00, 0x86, 0x01, 0x00,
            0x80, 0xDD, 0xBA, 0xDA, 0xB6, 0x4F, 0x5F, 0x02, 0x00, 0x80, 0x10, 0x22, 0x84, 0x30, 0x26, 0x84,
            0x50, 0x4A, 0x19, 0x63, 0x9C, 0x0B, 0x21, 0xA4, 0x94, 0x4A, 0x69, 0xAD, 0x8D, 0xB1, 0xD6, 0x39,
            0xE7, 0x7D, 0x08, 0x31, 0xC6, 0x94, 0x72, 0x2E, 0xA5, 0xD6, 0xD6, 0x5A, 0xEF, 0x63, 0xCC, 0xB9,
            0xD6, 0xDE, 0xE7, 0xDC, 0xFB, 0xDE, 0x4F, 0x10, 0x3C, 0x18, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x7B,
            0x7D, 0xB5, 0x6D, 0xBF, 0xBA, 0x04, 0x00, 0x88, 0x10, 0xC6, 0x84, 0x50, 0xCA, 0x38, 0x17, 0x42,
            0x4A, 0xA5, 0xB5, 0x31, 0xD6, 0x39, 0xEF, 0x43, 0x8C, 0x29, 0xE7, 0x52, 0x6A, 0x6B, 0x7D, 0x8C,
            0xB9, 0xD6, 0x3E, 0xE7, 0xBE, 0x1F, 0xD3, 0x00, 0x2C, 0xFF, 0xA0, 0xA0, 0xA1, 0xA2, 0xA2, 0xA3,
            0xA4, 0xA5, 0xA5, 0xA6, 0xA7, 0xA7, 0xA8, 0xA9, 0xAA, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAE, 0xAF,
            0xB0, 0xB1, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBA, 0xBB, 0xBC,
            0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xC9, 0xCA,
            0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA,
            0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA,
            0xEB, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC,
            0xFD, 0x07, 0xA1, 0x09, 0x80, 0x00, 0xF0, 0x04, 0x35, 0x3A, 0xB8, 0x83, 0x01, 0x3B, 0x38, 0xC5,
            0x70, 0x3B, 0x68, 0x92, 0xBB, 0x3B, 0x09, 0xA8, 0x04, 0x3C, 0x00, 0x82, 0x30, 0x3C, 0x4C, 0x28,
            0x61, 0x3C, 0x17, 0x3F, 0x8B, 0x3C, 0x92, 0x39, 0xA8, 0x3C, 0xBD, 0x7F, 0xC7, 0x3C, 0x10, 0x11,
            0xE9, 0x3C, 0xCD, 0x77, 0x06, 0x3D, 0xC4, 0x8F, 0x19, 0x3D, 0x5C, 0xD3, 0x2D, 0x3D, 0x43, 0x46,
            0x43, 0x3D, 0xC1, 0xEC, 0x59, 0x3D, 0xA8, 0xCB, 0x71, 0x3D, 0x1E, 0x74, 0x85, 0x3D, 0x13, 0xA4,
            0x92, 0x3D, 0xB4, 0x78, 0xA0, 0x3D, 0x22, 0xF5, 0xAE, 0x3D, 0x9E, 0x1C, 0xBE, 0x3D, 0x7B, 0xF2,
            0xCD, 0x3D, 0x1D, 0x7A, 0xDE, 0x3D, 0xED, 0xB6, 0xEF, 0x3D, 0x2B, 0xD6, 0x00, 0x0D, 0x83, 0x03,
            0xB4, 0x10, 0x01, 0x10, 0x00, 0xB3, 0x6D, 0xDB, 0xB6, 0xDB, 0xC9, 0xB6, 0x6D, 0xDB, 0xBC, 0xBB,
            0xCD, 0xB6, 0x6D, 0xDB, 0x7A, 0xCA, 0xD6, 0xB7, 0x6D, 0xDB, 0x1E, 0x88, 0x6B, 0x8B, 0x22, 0xD2,
            0x24, 0xA8, 0xAC, 0x3C, 0xCD, 0x55, 0x43, 0x62, 0x8D, 0x46, 0x32, 0x76, 0x6A, 0x5B, 0xA9, 0x7D,
            0x5D, 0x64, 0xED, 0xF0, 0x41, 0xC2, 0xEC, 0x71, 0xD2, 0xD1, 0x6B, 0x96, 0xD8, 0x7C, 0x5A, 0x2E,
            0x9D, 0x4A, 0x9B, 0x72, 0x6D, 0xF6, 0x4E, 0x79, 0xBD, 0xEA, 0x80, 0xCC, 0x7C, 0x79, 0x5C, 0xA2,
            0x9A, 0x9C, 0x97, 0xE5, 0xB6, 0xD7, 0xE4, 0xFE, 0xBD, 0x7B, 0x52, 0xE7, 0xD9, 0x33, 0x29, 0x10,
            0xF4, 0x4E, 0x3A, 0xF6, 0xFF, 0x24, 0xDD, 0xFF, 0xFF, 0x92, 0x7E, 0x6A, 0x2F, 0x8D, 0x46, 0x7A,
            0xC8, 0x94, 0x5E, 0x81, 0x92, 0x35, 0x2C, 0x4A, 0x9C, 0x56, 0x25, 0xCB, 0x5D, 0xFB, 0x5C, 0xFC,
            0x5C, 0x97, 0x9F, 0xAE, 0xD5, 0x8B, 0x30, 0xE0, 0x4B, 0x09, 0xEA, 0x2F, 0x29, 0x4B, 0x6C, 0x89,
            0x4A, 0x7C, 0xBC, 0x57, 0x8D, 0x6B, 0xDD, 0x6A, 0x73, 0xF3, 0x43, 0x7D, 0x82, 0x3A, 0x34, 0xE1,
            0xCC, 0xD9, 0x16, 0xE4, 0x0F, 0x6A, 0xC3, 0xA5, 0x6A, 0x1D, 0xC9, 0xEC, 0xD8, 0x95, 0xD8, 0x0E,
            0xB0, 0xA5, 0x62, 0x6F, 0x02, 0x9D, 0xFA, 0x71, 0x63, 0xDD, 0x20, 0x8C, 0xD8, 0xA1, 0x2C, 0x1F,
            0x34, 0x92, 0x2F, 0xE6, 0x18, 0xF2, 0x1E, 0x18, 0x4F, 0xE4, 0x9A, 0x49, 0xEC, 0xEE, 0x34, 0x95,
            0x82, 0x4E, 0xD3, 0x71, 0x1D, 0x31, 0x8B, 0xB3, 0xB7, 0xE6, 0x50, 0xC8, 0x65, 0x1E, 0x25, 0x42,
            0x16, 0xF0, 0xD4, 0x69, 0x11, 0xA5, 0x6F, 0x2D, 0x61, 0xD6, 0xD8, 0x65, 0x04, 0x05, 0x2E, 0x27,
            0x6A, 0xF2, 0x4A, 0x6C, 0x5E, 0xAE, 0x22, 0x30, 0x61, 0x35, 0x7B, 0xAB, 0xAF, 0xA5, 0x6C, 0x8B,
            0x75, 0x38, 0x35, 0x5A, 0x4F, 0xAD, 0x92, 0x1B, 0x68, 0xE7, 0xBB, 0x81, 0x21, 0xD7, 0x37, 0x72,
            0x7A, 0xF4, 0x26, 0x3A, 0xC7, 0x6F, 0x62, 0xC0, 0xAE, 0xCD, 0xFC, 0x2D, 0x62, 0xF0, 0x7D, 0x9B,
            0x41, 0x83, 0x28, 0x83, 0x5F, 0x23, 0x4C, 0x0E, 0xDD, 0x31, 0xE9, 0x98, 0x64, 0xB2, 0xAB, 0xBB,
            0x45, 0x13, 0xC3, 0xE2, 0xF7, 0x73, 0x8B, 0x82, 0x01, 0x16, 0x4B, 0x4A, 0x29, 0xDB, 0x3B, 0x28,
            0x3F, 0xC7, 0x2B, 0xAF, 0xD6, 0xE4, 0x7C, 0x50, 0x69, 0x71, 0x5D, 0xD9, 0xFC, 0x52, 0x49, 0xFC,
            0xAC, 0x44, 0xD8, 0x28, 0x0F, 0xDD, 0x95, 0x8D, 0x01, 0xCA, 0x91, 0x70, 0xA5, 0x45, 0xAC, 0xB2,
            0x27, 0x51, 0xF9, 0x9F, 0xA2, 0xB4, 0x49, 0x57, 0x5C, 0x33, 0x94, 0x88, 0x4C, 0xE5, 0x70, 0x96,
            0xE2, 0x95, 0x73, 0x7A, 0xCE, 0xD9
        };
    }
}
